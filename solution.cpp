#include<iostream>
#include<string.h>
#include<stdlib.h>
#include<sstream>
#include <fstream>
#include "tsp.h"
using namespace std;

/**
 *Purpose : To generate initial solution, using random generation a solution is obtained which is used as the starting point for simulated annealing
 * Return:Path generated by random generator
 * */
int* Solution::randomgen(int *tour)
{
	int i,v1,v2,temp;
	for(i=0;i<no;i++)
		tour[i]=i;
	for(i=0;i<no;i++)
	{
		v1=rand() % no;
		v2=rand() % no;
		temp =tour[v1];
		tour[v1]=tour[v2];
		tour[v2]=temp;
	}
	return tour;
}

/**
 *Purpose : To perform 2 opt swap-to perturb a path
 *Input Argument:The path to be perturbed using 2 opt 
 * Return:Path generated after perturbing
 * */

int* Solution::twooptswap(int *copy,int *tour)
{
	///Generate random numbers 
	int v1=rand() % no;
	int v2=rand() % no;
	int k,i,j;
	
	int temp;

	if(v1!=v2)
	{
		if(v1>v2)
		{
			k=0;
			for(i=v1;i<no;i++)
			{
				copy[k]=tour[i];
				k++;
			}
			for(i=0;i<v1;i++)
			{
				copy[k]=tour[i];
				k++;
			}
			v2+=(no-v1);
			v1=0;

		}
		for(k=v1,i=v2;k<i;k++,i--)
		{
			temp=copy[k];
			copy[k]=copy[i];
			copy[i]=temp;
		}
		
	}


	return copy;
}

/**
 *Purpose : To evaluate a tour generated
 *Input Argument: Tour to be evaluated
* Return:Cost of tour in terms of distance of whole tour
 * */
double Solution::Evaluate(int *current)
{
	double sum=0.0;
	int i=0,index1=0,ind=0;
	for(i=0;i<no-1;i++)
	{
	      index1=current[i];
	      ind=current[i+1];
		  
	      sum=sum+dist_matrix[index1][ind];
	}
	index1=i;
	ind=0;
	sum=sum+dist_matrix[index1][ind];
	return sum;
}

